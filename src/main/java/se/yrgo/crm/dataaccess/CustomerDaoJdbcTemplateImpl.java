package se.yrgo.crm.dataaccess;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import se.yrgo.crm.domain.Call;
import se.yrgo.crm.domain.Customer;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANYNAME=?, EMAIL=?, TELEPHONE=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static final String INSERT_SQL = "INSERT INTO CUSTOMER (COMPANYNAME, EMAIL, TELEPHONE, NOTES) VALUES (?,?,?,?)";
    private static final String INSERT_CALL_SQL = "INSERT INTO CUSTOMERCALLS (CUSTOMER_ID, TIME_AND_DATE, NOTES) VALUES (?,?,?)";
    private static final String GET_CUSTOMER_BY_ID = "SELECT CUSTOMER_ID, COMPANYNAME, EMAIL, TELEPHONE, NOTES FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String GET_ALL_CUSTOMERS = "SELECT * FROM CUSTOMER";
    private static final String GET_CALLS = "SELECT CALL_ID, TIME_AND_DATE, NOTES FROM CUSTOMERCALLS WHERE CUSTOMER_ID=?";

    private JdbcTemplate template;
    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template){
        this.template = template;
    }

    private void createTables()	{
        try{
            this.template.update("CREATE TABLE IF NOT EXISTS CUSTOMER (CUSTOMER_ID integer generated by default as identity (start with 1), COMPANYNAME VARCHAR(255), NOTES VARCHAR(255))");
            this.template.update("CREATE TABLE IF NOT EXISTS CUSTOMERCALLS (CALL_ID integer generated by default as identity (start with 1), CUSTOMER_ID VARCHAR(20), TIME_AND_DATE DATE, NOTES VARCHAR(255)");
        }catch (org.springframework.jdbc.BadSqlGrammarException e){
            System.out.println("Assuming the customer and customercall table exists");
        }
    }

    @Override
    public void create(Customer newCustomer) {
        template.update(INSERT_SQL, newCustomer.getCompanyName(), newCustomer.getEmail(), newCustomer.getTelephone(), newCustomer.getNotes());
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return this.template.queryForObject(GET_CUSTOMER_BY_ID, new CustomerRowMapper());
    }

    @Override
    public List<Customer> getByName(String name) {
        return this.template.query(GET_CUSTOMER_BY_ID, new CustomerRowMapper());
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        this.template.update(UPDATE_SQL, customerToUpdate.getCustomerId(), customerToUpdate.getCalls(), customerToUpdate.getCompanyName(), customerToUpdate.getEmail(), customerToUpdate.getTelephone(), customerToUpdate.getNotes());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        this.template.update(DELETE_SQL, oldCustomer.getCustomerId());
    }

    @Override
    public List<Customer> getAllCustomers() {
        return this.template.query(GET_ALL_CUSTOMERS, new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        return this.template.queryForObject(GET_CUSTOMER_BY_ID, new CustomerRowMapper());
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        this.template.update(INSERT_CALL_SQL, customerId, newCall.getTimeAndDate(), newCall.getNotes());
    }


    class CustomerRowMapper implements RowMapper<Customer> {
        public Customer mapRow(ResultSet rs, int arg1) throws SQLException {
            int customerId = rs.getInt(1);
            String companyName = rs.getString(2);
            String email = rs.getString(3);
            String telephone = rs.getString(4);
            String notes = rs.getString(5);

            return new Customer("" + customerId, companyName, email, telephone, notes);
        }
    }
}
